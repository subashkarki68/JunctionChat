// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgresql://postgres:hellosubash@localhost:5432/postgres?schema=public"
}

// model User {
//   id        Int      @id @default(autoincrement())
//   username  String   @unique
//   email     String   @unique
//   password  String
//   avatarUrl String? // Optional avatar for users
//   createdAt DateTime @default(now())

//   memberships      Membership[]
//   roles            RoleAssignment[]
//   messages         Message[]
//   reactions        Reaction[]
//   directChats      DirectMessage[]
//   sentMessages     DirectMessage[]  @relation("SentMessages")
//   receivedMessages DirectMessage[]  @relation("ReceivedMessages")
//   Channel          Channel?         @relation(fields: [channelId], references: [id])
//   channels         Channel[]        @relation("ChannelAccess")
//   channelId        Int?
// }

// model Server {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())

//   channels    Channel[]
//   memberships Membership[]
//   roles       Role[]
// }

// model Channel {
//   id        Int      @id @default(autoincrement())
//   name      String
//   serverId  Int
//   isPrivate Boolean  @default(false) // Public or private channel
//   createdAt DateTime @default(now())

//   server   Server    @relation(fields: [serverId], references: [id])
//   messages Message[]

//   // Optional: Users and Roles that can access private channels
//   allowedUsers User[] @relation("ChannelAccess")
//   allowedRoles Role[] @relation("RoleChannelAccess")
//   User         User[]
// }

// model Message {
//   id        Int      @id @default(autoincrement())
//   content   String
//   createdAt DateTime @default(now())

//   userId       Int
//   channelId    Int?
//   directChatId Int? // For direct messages

//   user       User           @relation(fields: [userId], references: [id])
//   channel    Channel?       @relation(fields: [channelId], references: [id])
//   directChat DirectMessage? @relation(fields: [directChatId], references: [id])

//   reactions Reaction[]
// }

// model Membership {
//   id       Int      @id @default(autoincrement())
//   userId   Int
//   serverId Int
//   joinedAt DateTime @default(now())

//   user   User   @relation(fields: [userId], references: [id])
//   server Server @relation(fields: [serverId], references: [id])

//   @@unique([userId, serverId]) // A user can only join a server once
// }

// model Role {
//   id       Int    @id @default(autoincrement())
//   name     String
//   serverId Int

//   server          Server           @relation(fields: [serverId], references: [id])
//   roleAssignments RoleAssignment[]

//   channels Channel[] @relation("RoleChannelAccess") // Private channel access for roles
// }

// model RoleAssignment {
//   id     Int @id @default(autoincrement())
//   userId Int
//   roleId Int

//   user User @relation(fields: [userId], references: [id])
//   role Role @relation(fields: [roleId], references: [id])

//   @@unique([userId, roleId]) // User can have a role only once
// }

// model Reaction {
//   id        Int    @id @default(autoincrement())
//   emoji     String // Emoji code (e.g., ":smile:")
//   userId    Int
//   messageId Int

//   user    User    @relation(fields: [userId], references: [id])
//   message Message @relation(fields: [messageId], references: [id])
// }

// model DirectMessage {
//   id         Int      @id @default(autoincrement())
//   senderId   Int
//   receiverId Int
//   createdAt  DateTime @default(now())

//   sender   User @relation("SentMessages", fields: [senderId], references: [id])
//   receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

//   messages Message[]
//   User     User?     @relation(fields: [userId], references: [id])
//   userId   Int?

//   @@unique([senderId, receiverId]) // One-on-one direct chat
// }
